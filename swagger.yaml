openapi: 3.0.0
info:
  title: Anginat Event API
  description: API for managing authentication, events, and user registrations in the Anginat Event app.
  version: 1.0.0
servers:
  - url: https://anginat-event-backend.onrender.com
paths:
  /api/v1/auth/register:
    post:
      summary: Register a new user with email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email
                password:
                  type: string
                  description: User's password
      responses:
        "201":
          description: User Registered Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Email and password are required or User already exists with same email
        "500":
          description: Internal Server Error

  /api/v1/auth/full-register:
    post:
      summary: Complete the user registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: number
                  description: User ID
                companyName:
                  type: string
                  description: Company Name
                phoneNo:
                  type: string
                  description: Phone Number
      responses:
        "200":
          description: User Saved Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: All fields are required or User with this phone number already exists
        "500":
          description: Internal Server Error

  /api/v1/auth/login:
    post:
      summary: Login a user with email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email
                password:
                  type: string
                  description: User's password
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithTokens"
        "400":
          description: Email and password fields are required or Incorrect credentials or User does not exist
        "500":
          description: Internal Server Error

  /api/v1/auth/refresh-token:
    post:
      summary: Refresh the access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token
      responses:
        "200":
          description: Access Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithTokens"
        "400":
          description: Refresh Token is required or Token expired or invalid or User does not exist or Refresh Token not matched
        "500":
          description: Internal Server Error

  /api/v1/auth/forget-password:
    post:
      summary: Send password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email
      responses:
        "200":
          description: Email sent for Password Reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Email is required or User does not exist
        "500":
          description: Internal Server Error

  /api/v1/auth/reset-password/{token}:
    get:
      summary: Verify reset token and display reset password form
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: Password reset token
      responses:
        "200":
          description: Password reset form
          content:
            text/html:
              schema:
                type: string
        "400":
          description: Invalid Password Reset token or Password Reset Token has expired
        "500":
          description: Internal Server Error

    post:
      summary: Reset password
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: Password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: New password
      responses:
        "200":
          description: Password Reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Password field is required or Invalid Password Reset token or Password Reset Token has expired
        "500":
          description: Internal Server Error

  /api/v1/admin/event:
    get:
      summary: Get all created events
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [completed, active]
          required: false
          description: Status of the events to filter (completed or active)
      responses:
        "200":
          description: A list of created events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "401":
          description: Unauthorized

    post:
      summary: Register a new event
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                eventName:
                  type: string
                  description: Name of the event
                isPaid:
                  type: boolean
                  description: Whether the event is paid or not
                address:
                  type: string
                  description: Address of the event
                city:
                  type: string
                  description: City where the event is held
                eventDate:
                  type: string
                  format: date-time
                  description: Date and time of the event
                userJourney:
                  type: string
                  description: User journey details as JSON string
                eventTemplate:
                  type: string
                  description: Event template details as JSON string
                attendieType:
                  type: string
                  description: Attendee type details as JSON string
                image:
                  type: string
                  format: binary
                  description: Image for the event
      responses:
        "201":
          description: Event created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Bad request
        "501":
          description: Error on uploading image to cloudinary

  /api/v1/admin/event/{id}:
    get:
      summary: Get event details
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the event to retrieve
      responses:
        "200":
          description: Event details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Cannot get event with provided Id

    patch:
      summary: Update an event
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the event to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                eventName:
                  type: string
                  description: Name of the event
                isPaid:
                  type: boolean
                  description: Whether the event is paid or not
                address:
                  type: string
                  description: Address of the event
                city:
                  type: string
                  description: City where the event is held
                eventDate:
                  type: string
                  format: date-time
                  description: Date and time of the event
                userJourney:
                  type: string
                  description: User journey details as JSON string
                eventTemplate:
                  type: string
                  description: Event template details as JSON string
                attendieType:
                  type: string
                  description: Attendee type details as JSON string
                image:
                  type: string
                  format: binary
                  description: Image for the event
      responses:
        "200":
          description: Event updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Cannot get event with provided Id
        "501":
          description: Error while uploading on cloudinary

    delete:
      summary: Delete an event
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the event to delete
      responses:
        "200":
          description: Event deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Cannot get event with provided Id

  /api/v1/event:
    get:
      summary: Get all active events
      responses:
        "200":
          description: A list of active events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

  /api/v1/event/{id}:
    get:
      summary: Get event details
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the event to retrieve
      responses:
        "200":
          description: Event details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Cannot get event with provided Id

  /api/v1/event/register:
    post:
      summary: Register a user for an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: string
                  description: ID of the event
                companyName:
                  type: string
                  description: Name of the company
                userId:
                  type: string
                  description: ID of the user
                userJourney:
                  type: string
                  description: User journey details as JSON string
      responses:
        "200":
          description: User registered for the event successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  event:
                    $ref: "#/components/schemas/Event"
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad request or User already registered for the event
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error

  /api/v1/event/attendance:
    post:
      summary: Mark user attendance at an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: string
                  description: ID of the event
                userId:
                  type: string
                  description: ID of the user
      responses:
        "200":
          description: User attendance marked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Cannot mark attendance with provided Id
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        companyName:
          type: string
        phoneNo:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserWithTokens:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        accessToken:
          type: string
        refreshToken:
          type: string

    Event:
      type: object
      properties:
        id:
          type: string
        eventName:
          type: string
        isPaid:
          type: boolean
        address:
          type: string
        city:
          type: string
        eventDate:
          type: string
          format: date-time
        userJourney:
          type: object
        eventTemplate:
          type: object
        attendieType:
          type: object
        image:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
